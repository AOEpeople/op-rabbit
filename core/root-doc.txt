Please see the README on [[https://github.com/SpinGo/op-rabbit]] for an overview.

==Configuration==

Set up RabbitMQ connection information in `application.conf`:

{{{
op-rabbit {
  topic-exchange-name = "op-rabbit-testeroni"
  connection {
    virtual-host = "/"
    hosts = ["127.0.0.1"]
    username = "guest"
    password = "guest"
    port = 5672
    timeout = 3s
  }
}
}}}

==Usage==

Boot up the [[com.spingo.op_rabbit.RabbitControl RabbitControl]] actor:

{{{
import com.spingo.op_rabbit.RabbitControl
import akka.actor.{ActorSystem, Props}

implicit val actorSystem = ActorSystem("such-system")
val rabbitControl = actorSystem.actorOf(Props[RabbitControl])
}}}

==Set up a [[com.spingo.op_rabbit.Subscription Subscription]]: ([[com.spingo.op_rabbit.TopicBinding Topic subscription]])==

(this example uses `op-rabbit-play-json`)

{{{
import com.spingo.op_rabbit.PlayJsonSupport._
import com.spingo.op_rabbit._
import play.api.libs.json._

import scala.concurrent.ExecutionContext.Implicits.global
case class Person(name: String, age: Int)
implicit val personFormat = Json.format[Person] // setup play-json serializer

val subscriptionRef = Subscription.run(rabbitControl) {
  import Directives._
  // A qos of 3 will cause up to 3 concurrent messages to be processed at any given time.
  channel(qos = 3) {
    consume(topic("such-message-queue", List("some-topic.#"))) {
      (body(as[Person]) & routingKey) { (person, key) =>
        // do work; this body is executed in a separate thread, as provided by the implicit execution context
        println(s"A person named ${person.name} with age ${person.age} was received over '${key}'.")
        ack()
      }
    }
  }
}
}}}

Now, test the consumer by sending a message:

{{{
subscriptionRef.initialized.foreach { _ =>
  rabbitControl ! TopicMessage(Person("Your name here"), "some-topic.cool")
}
}}}

Stop the consumer:

{{{
subscriptionRef.close()
}}}

Note, if your call generates an additional future, you can pass it to ack, and message will be acked based off the Future success, and nacked with Failure (such that the configured [[com.spingo.op_rabbit.RecoveryStrategy RecoveryStrategy]] if the Future fails:

{{{
  // ...
      (body(as[Person]) & routingKey) { (person, key) =>
        // do work; this body is executed in a separate thread, as provided by the implicit execution context
        val result: Future[Unit] = myApi.methodCall(person)
        ack(result)
      }
  // ...

}}}

See [[com.spingo.op_rabbit.Subscription Subscription]]

===Accessing additional headers===

If there are other headers you'd like to access, you can extract multiple using nested functions, or combine multiple directives to a single one. IE:
As seen in the example above, you can extract headers in addition to the message body, using op-rabbit's [[http://spingo-oss.s3.amazonaws.com/docs/op-rabbit/core/current/index.html#com.spingo.op_rabbit.Directives Directives]]. You can use multiple declaratives via multiple nested functions, as follows:

{{{
import com.spingo.op_rabbit.properties._

// Nested directives
// ...
      body(as[Person]) { person =>
        optionalProperty(ReplyTo) { replyTo =>
          // do work
          ack()
        }
      }
// ...
}}}

Or, you can combine directives using `&` to form a compound directive, as follows:

{{{
// Compound directive
// ...
      (body(as[Person]) & optionalProperty(ReplyTo)) { (person, replyTo) =>
        // do work
        ack()
      }
// ...
}}}

See the documentation on [[com.spingo.op_rabbit.Directives Directives]] for more details.

===Shutting down a consumer===

The following methods are available on a [[com.spingo.op_rabbit.SubscriptionRef SubscriptionRef]] which will allow control over the subscription.

{{{
// stop receiving new messages from RabbitMQ immediately; shut down consumer and channel as soon as pending messages are completed. A grace period of 30 seconds is given, after which the subscription forcefully shuts down. (Default of 5 minutes used if duration not provided)
subscription.close(30 seconds)

// Shut down the subscription immediately; don't wait for messages to finish processing.
subscription.abort()

// Future[Unit] which completes once the provided binding has been applied (IE: queue has been created and topic bindings configured). Useful if you need to assert you don't send a message before a message queue is created in which to place it.
subscription.initialized

// Future[Unit] which completes when the subscription is closed.
subscription.closed
}}}

==Publish a message==

{{{
rabbitControl ! TopicMessage(Person(name = "Mike How", age = 33), routingKey = "some-topic.very-interest")

rabbitControl ! QueueMessage(Person(name = "Ivanah Tinkle", age = 25), queue = "such-message-queue")
}}}

By default:

- Messages will be queued up until a connection is available
- Messages are monitored via publisherConfirms; if a connection is lost before RabbitMQ confirms receipt of the message, then the message is published again. This means that the message may be delivered twice, the default opinion being that `at-least-once` is better than `at-most-once`. You can use [[com.spingo.op_rabbit.UnconfirmedMessage UnconfirmedMessage]] if you'd like `at-most-once` delivery instead.
- If you would like to be notified of confirmation, use the ask pattern:

{{{scala
val received = (rabbitControl ? QueueMessage(Person(name = "Ivanah Tinkle", age = 25), queue = "such-message-queue")).mapTo[Boolean]
}}}

== Error Notification ==

It's important to know when your consumers fail. Out of the box, `op-rabbit` ships with support for logging to `logback` (and therefore syslog) via [[com.spingo.op_rabbit.LogbackLogger LogbackLogger]], and also `airbrake` via `op-rabbit-airbrake`. Without any additional signal provided by you, logback will be used, making error visibility a default.

You can report errors to multiple sources by combining error logging strategies; for example, if you'd like to report to both `logback` and to `airbrake`, import / set the following implicit RabbitErrorLogging in the scope where your consumer is instantiated:

{{{
import com.spingo.op_rabbit.{LogbackLogger, RabbitControl}

implicit val rabbitErrorLogging = LogbackLogger + AirbrakeLogger.fromConfig
}}}

Implementing your own error reporting strategy is simple; see [[com.spingo.op_rabbit.LogbackLogger]]:

== Authors ==

- Tim Harper (http://timcharper.com)

== Credits ==

This library builds upon the excellent [[https://github.com/thenewmotion/akka-rabbitmq Akka RabbitMQ client]] by Yaroslav Klymko.
